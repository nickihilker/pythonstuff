

##############################################Implement a stack using linked lists##############################################
class Node:
    def __init__(self, data, next=None):
        self.data = data
        self.next = next
 
class stacklist:
    def __init__(self):
        self.head = None
        self.nodesCount = 0
        
    def push(self, data):      
        node = Node(data)
        if node is None:
            print('Heap Overflow')
            return 
        node.data = data
        node.next = self.head
        self.head = node
        self.nodesCount += 1
        
    def pop(self):          
        if self.head is None:
            print('Stack Underflow')
            exit(-1)
        head = self.head.data
        self.head = self.head.next
        self.nodesCount -= 1
        return head
 
    def isEmpty(self):
        return self.head is None
 
    def peek(self):
        if not self.isEmpty():
            return self.head.data
        else:
            #print('The stack is empty')
            exit(-1)
 

stack = stacklist()
stack.push(3)
stack.push(12)
stack.push(6)
print("the top element is", stack.peek())
print(stack.pop())
print(stack.pop())
#print(stack.pop())
#print(stack.pop())
stack.push(7)
if stack.isEmpty():
    print("it's empty")
else:
    print("it's not empty")


##############################################Implement a queue using linked lists##############################################
#queue should be simpler, since it's going sttrraight down the list
#queuelist = []
class Queue:
    def __init__(self):
        self.head = None
        self.last = None
        
    def isEmpty(self):
        return self.head == None
    
    def enqueue(self, data):
        if self.last is None:
            self.head = Node(data)
            self.last = self.head
        else:
            self.last.next = Node(data)
            self.last = self.last.next
 
    def dequeue(self):
        if self.head is None:
            return None
        else:
            to_return = self.head.data
            self.head = self.head.next
            return to_return
        
    def peek(self):
        if not self.isEmpty():
            return self.head.data
        else:
            print('The stack is empty')
            exit(-1)
print ("QUEUE")
print(" ")

#alist = []
q = Queue()
q.enqueue(4)
q.enqueue(7)
q.enqueue(9)
print("the head element is", q.peek())
print(q.dequeue())
print(q.dequeue())
#print(q.dequeue())
q.enqueue(15)
if q.isEmpty():
    print("it's empty")
else:
    print("it's not empty")

##############################################Implement a deque using linked lists##############################################

# need tto use a doubly linked list
#it's similar to a queue but you need to add items at the endd as well.. kind of like combining the two issues!

print("DEQUE")
print(" ")

      
class dequelist:
    head = None
    last = None
    Size = 0
    def __init__(self):
        self.head = None
        self.last = None
        self.Size = 0
    
    def isEmpty(self):
        return self.head == None
    
    def size(self):
        return self.Size
    #make front and back enqueue and dequeue
    def enqueuefront(self, data):
        node = Node(data)
        if (node == None):
            print("end")
        else:
            if self.last is None:
                self.head = node
                self.last = node
            else:
                node.next = self.head
                self.head.next = node
                self.head = node
            self.Size += 1
     
    def enqueueback(self, data):
        node = Node(data)
        if (node == None):
            return None
        else:
            
            if self.last is None:
                self.head = node
                self.last = node
            else:
                node.prev = self.last
                self.last.next = node
                self.last = node       
            self.Size += 1
            
    def dequeuefront(self):
        if (self.isEmpty()):
            return None
        else:
            tempnum = self.head
            self.head = self.head.next
            
            if self.head is None:
                self.last = None
            else:
                self.head.prev = None
            self.Size -= 1
            
        
    def dequeueback(self):
        if (self.isEmpty()):
            return None
        else:
            tempnum = self.last
            self.last = self.last.prev
            
            if self.last is None:
                self.head = None
            else:
                self.last.next = None
            self.Size -= 1

    def getHead(self):
        if (self.isEmpty()):
            return -1
        return self.head.data
    
    def getRear(self):
        if (self.isEmpty()):
            return -1
        return self.last.data
    
    def erase(self):
        self.last = None
        while (self.head != None):
            temp = self.head
            self.head = self.head.next
        self.Size = 0
  


dq = dequelist()

#showing front. can be moved around
dq.enqueuefront(4)
print("front of q is " + str(dq.getHead()))
dq.enqueuefront(5)
print("front of q is " + str(dq.getHead()))
dq.enqueuefront(6)
print("front of q is " + str(dq.getHead()))
dq.enqueuefront(9)
print("front of q is " + str(dq.getHead()))
dq.dequeuefront()
print("front of q is " + str(dq.getHead()))
dq.dequeuefront()
print("front of q is " + str(dq.getHead()))


#####

dq.enqueueback(1)
print("back of q is " + str(dq.getRear()))
dq.enqueueback(2)
print("back of q is " + str(dq.getRear()))
dq.enqueueback(3)
print("back of q is " + str(dq.getRear()))
dq.dequeueback()
print("back of q is " + str(dq.getRear()))
dq.dequeueback()
print("back of q is " + str(dq.getRear()))


print("hi")


if dq.isEmpty():
    print("it's empty")
else:
    print("it's not empty")
