import random

#code copied for binary heap operations
class MinBinHeap:
    def __init__(self):
        self.heapList = [0]
        self.currentSize = 0
    
    #percolates the new item up
    def percUp(self,i): 
        while i // 2 > 0:
          if self.heapList[i] < self.heapList[i // 2]: #check to swap with parent
             tmp = self.heapList[i // 2]
             self.heapList[i // 2] = self.heapList[i]
             self.heapList[i] = tmp #swap with parent
          i = i // 2

    #percolates a node down the tree
    def percDown(self,i): 
      while (i * 2) <= self.currentSize:
          mc = self.minChild(i) #get index of min child
          if self.heapList[i] > self.heapList[mc]: #if greater than min child
              tmp = self.heapList[i]
              self.heapList[i] = self.heapList[mc]
              self.heapList[mc] = tmp #swap with min child
          i = mc
          
    def insert(self,k):
      self.heapList.append(k) #item first becomes last leaf
      self.currentSize = self.currentSize + 1 #update size
      self.percUp(self.currentSize) #percolate it up while smaller than parents

    #returns smallest child index
    def minChild(self,i): 
      if i * 2 + 1 > self.currentSize:
          return i * 2
      else:
          if self.heapList[i*2] < self.heapList[i*2+1]:
              return i * 2
          else:
              return i * 2 + 1

    #deletes minimum and returns it
    def delMin(self): 
      retval = self.heapList[1]
      self.heapList[1] = self.heapList[self.currentSize] #root equals last leaf
      self.currentSize = self.currentSize - 1 #update size 
      self.heapList.pop() 
      self.percDown(1) #swaps down that new root while its bigger than children
      return retval

    #builds heap for inputted list
    def buildHeap(self,alist): 
      i = len(alist) // 2 #for tree levels/indices
      self.currentSize = len(alist) #update size
      self.heapList = [0] + alist #replaces list
      while (i > 0): #keeps bringing the root down while they're bigger than child nodes
          self.percDown(i)
          i = i - 1
          
    #returns the heap array
    def getList(self): 
        return self.heapList[1:]
    


randomList = [random.randint(1,10) for _ in range(10)]
prob1Heap = MinBinHeap()

print("problem one:")
for i in range(len(randomList)):
    prob1Heap.insert(randomList[i])
    print(prob1Heap.heapList)
    
for i in range(len(randomList)):
    prob1Heap.delMin()
    print(prob1Heap.heapList)

print("problem two:")

prob1Heap.buildHeap(randomList)
print(prob1Heap.heapList)

#prob2Heap = MinBinHeap()
