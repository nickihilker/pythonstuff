from copy import deepcopy
from collections import deque

class State(object):
    def __init__(self, missionaries, cannibals , boats):
        self.missionaries = missionaries
        self.cannibals = cannibals
        self.boats = boats
  
    def successors(self):
        if self.boats == 1:
          theway = -1
          direction = "from og shore to new shore"
        else:
          theway = 1
          direction = "back from new shore to og shore"
        for m in range(3):
          for c in range(3):
            newState = State(self.missionaries+theway*m, self.cannibals+theway*c, self.boats+theway*1);
            if m+c >= 1 and m+c <= 2 and newState.isValid():  
              action = "take %d missionaries and %d cannibals %s. %r" % ( m, c, direction, newState) 
              yield action, newState
            

    def isValid(self):
        if self.missionaries < 0 or self.cannibals < 0 or self.missionaries > 3 or self.cannibals > 3 or (self.boats != 0 and self.boats != 1):
            return False   
        if self.cannibals > self.missionaries and self.missionaries > 0:    
            return False
        if self.cannibals < self.missionaries and self.missionaries < 3:  
            return False
        return True


    def is_goal_state(self):
        return self.cannibals == 0 and self.missionaries == 0 and self.boats == 0


    def __repr__(self):
        return "Currently we are at... (%d, %d, %d)" % (self.missionaries, self.cannibals, self.boats)


class Node(object):  
    def __init__(self, parent_node, state, action, depth):
        self.parent_node = parent_node
        self.state = state
        self.action = action
        self.depth = depth
  
    def expand(self):
        for (action, succ_state) in self.state.successors():
          succ_node = Node(
                           parent_node=self,
                           state=succ_state,
                           action=action,
                           depth=self.depth + 1)
          yield succ_node
  
    def findsolu(self):
        solution = []
        node = self
        while node.parent_node is not None:
          solution.append(node.action)
          node = node.parent_node
        solution.reverse()
        return solution


def bfts(iState):
    initial_node = Node(
                      parent_node=None,
                      state=iState,
                      action=None,
                      depth=0)
    fifo = deque([initial_node])
    num_expansions = 0
    max_depth = -1
    while True:
        if not fifo:
          print ("%d expansions" % num_expansions)
          return None
        node = fifo.popleft()
        if node.depth > max_depth:
          max_depth = node.depth
        if node.state.is_goal_state():
          solution = node.findsolu()
          return solution
        num_expansions += 1
        fifo.extend(node.expand())
    


def main():
    iState = State(3,3,1)
    solution = bfts(iState)
    if solution is None:
        print ("no solution")
    else:
        for step in solution:
          print ("%s" % step)

main()

